package de.bananeiml.musicdb.ui;

import java.awt.EventQueue;
import org.apache.log4j.PropertyConfigurator;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.bananeiml.musicdb.ui//MusicExplorer//EN", autostore = false)
@TopComponent.Description(preferredID = "MusicExplorerTopComponent",
    //iconBase="SET/PATH/TO/ICON/HERE", 
    persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "de.bananeiml.musicdb.ui.MusicExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MusicExplorerAction",
    preferredID = "MusicExplorerTopComponent")
public final class MusicExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final transient ExplorerManager explorerManager;
    
    static {
        PropertyConfigurator.configure(
                MusicExplorerTopComponent.class.getResource("/de/bananeiml/musicdb/ui/log4j.properties")); // NOI18N
        
    }
    
    public MusicExplorerTopComponent() {
        explorerManager = new ExplorerManager();
        
        initComponents();
        
        setName(NbBundle.getMessage(MusicExplorerTopComponent.class, "CTL_MusicExplorerTopComponent")); // NOI18N
        setToolTipText(NbBundle.getMessage(MusicExplorerTopComponent.class, "HINT_MusicExplorerTopComponent")); // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(beanTreeView1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient org.openide.explorer.view.BeanTreeView beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                explorerManager.setRootContext(new VinylRootNode());
            }
        });
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }
}
